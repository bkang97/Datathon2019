import keras
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
from keras.layers import Input, Dense, Lambda, Merge
from keras.models import Model
from keras import backend as K
from keras import objectives
from keras.datasets import mnist
from keras.layers.core import Reshape
from __future__ import print_function
import numpy as np
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten,Conv2DTranspose
from keras.layers import Convolution2D, AveragePooling2D
from keras.layers.convolutional import Conv2D, MaxPooling2D, ZeroPadding2D, UpSampling2D
from keras.utils import np_utils
from keras.layers.normalization import BatchNormalization
from keras.callbacks import ModelCheckpoint,LearningRateScheduler
import os, random
from keras.optimizers import SGD
import pandas as pd
(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train = x_train.astype('float32') / 255.
x_test = x_test.astype('float32') / 255.
x_train = x_train.reshape((len(x_train), np.prod(x_train.shape[1:])))
x_test = x_test.reshape((len(x_test), np.prod(x_test.shape[1:])))

n=60

x_train=x_train[0:n]
x_test=x_test[n:n+n]

noise_factor = 0.15
x_train_noisy = x_train + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_train.shape) 
x_test_noisy = x_test + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_test.shape) 

x_train_noisy = np.clip(x_train_noisy, 0., 1.)
x_test_noisy = np.clip(x_test_noisy, 0., 1.)

x_train=x_train.reshape((n,28,28,1))
x_test=x_test.reshape((n,28,28,1))
x_train_noisy = x_train_noisy.reshape((n,28,28,1))
x_test_noisy = x_test_noisy.reshape((n,28,28,1))

x_train_noisy=np.concatenate([x_train_noisy,x_train_noisy]).reshape(2*n,28,28,1)
x_train=np.concatenate([x_train,x_train]).reshape(2*n,28,28,1)

np.random.seed(200)
sel=random.sample(range(0,x_train.shape[0]), 60)
y_train=pd.get_dummies(y_train[sel])
x_train_noisy=x_train_noisy[sel]
x_train=x_train_noisy

batch_size = 30
nb_classes = 10
img_rows, img_cols = 28, 28
nb_filters = 32
pool_size = (2, 2)
kernel_size = (3, 3)
input_shape=(28,28,1)

learning_rate = 0.008
decay_rate = 5e-5
momentum = 0.9

sgd = SGD(lr=learning_rate,momentum=momentum, decay=decay_rate, nesterov=True)


input_img = Input(shape=(28, 28, 1))  # adapt this if using `channels_first` image data format
x = Dense(120,activation='relu')
x = Conv2DTranspose(16, (4, 4), activation='relu', padding='same')(input_img)
x = BatchNormalization()(x)
x = Conv2DTranspose(16, (2, 2), activation='relu', padding='same')(x)
x = Conv2D(1,(1,1),padding='same',activation='sigmoid')(x)
sgd = SGD(lr=learning_rate,momentum=momentum, decay=decay_rate, nesterov=True)
generator = Model(input_img, x)

generator.compile(loss='mean_squared_error', optimizer=sgd,metrics = ['accuracy'])
generator.summary()



discriminator = Sequential()
discriminator.add(Convolution2D(32, (5, 5),
                        padding='same',
                        input_shape=input_shape))
discriminator.add(AveragePooling2D(pool_size=(2,2)))
discriminator.add(Convolution2D(64, (5, 5),padding='same'))
discriminator.add(AveragePooling2D(pool_size=(2,2)))
discriminator.add(Activation('relu'))
discriminator.add(Convolution2D(64, (5,5),padding='same'))
discriminator.add(Convolution2D(16, (1,1),activation='sigmoid',padding='same'))
discriminator.add(Reshape((28,28,1)))
discriminator.compile(loss='mean_squared_error', optimizer=sgd,metrics = ['accuracy'])
discriminator.summary()



################## GAN

def train(net, val):
    net.trainable = val
    for k in net.layers:
       k.trainable = val
train(generator, True)

gan_input = Input(batch_shape=(None, 28,28,1))

gan_level2 = discriminator(generator([gan_input]))

GAN = Model(gan_input, gan_level2)
GAN.compile(loss='mean_squared_error', optimizer=sgd,metrics = ['accuracy'])

nb_epochs=3000

GAN.fit(x_train_noisy,x_train,
        batch_size=30, epochs=nb_epochs,verbose=2)
    

g=GAN.predict(x_train_noisy)


plt.figure(figsize=(10, 10))
for i in range(11,18):
    ax = plt.subplot(1, 8, i-10)
    plt.imshow(x_train_noisy[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.figure(figsize=(10, 10))
for i in range(11,18):
    ax = plt.subplot(1, 8, i-10)
    plt.imshow(np.array(g).reshape(60,28, 28)[i])
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()
